{{!--
###
 #  @View
 #
 #  @name vertical-split
 #  @type component
 #  @description Vertical Split course component
 #  @maturing
 #  @content
 #    @contains @object_of 'parameters' with:
 #      @prop header type={string} title="Header Text" description="Text for the primary region's header." @allow localeKeyRTF
 #      @prop @advanced header_class type={string} title="Header Class" description="Additional class for the page Header"
 #      @prop @advanced text_class type={string} title="Text Class" description="Additional class for the page texts"
 #      @prop subtitle type={string} title="Subtitle Text (Optional)" description="Subtitle text for the primary region." @allow localeKeyRTF
 #      @contains @object_of 'primary' with:
 #        @title 'Primary Region'
 #        @prop enable type={boolean} title="Enable Primary Region?" default="false"
 #        @contains @one_of dependency with:
 #          @when enable = "true":
 #            @contains @object_of 'background' with:
 #              @prop [type] type={string} title="Type of Background" description="Determines the type of background for the region."
 #                "image"
 #                "color"
 #              @contains @one_of dependency with:
 #                @when type = "image":
 #                  @prop path type={string} title="Path" description="Path to Image" @allow imagePicker
 #                  @prop color type={string} title="Color Overlay" description="Enter a color (e.g., '#999' or 'rgb(230,230,230)')"
 #                  @prop size type={string} title="Image Size (Optional)" description="Enter a size for the image (e.g., 100% auto)."
 #                  @prop @advanced position type={string} title="Background Position" description="The location or coordinates that specify where the background image is pinned relative to its container. Accepts one to four valid CSS values. If one value is specified, this is either the edge or the X-coordinate (with the Y-coordinate set to 50%). If two values, X and Y-coordinates.If four values, odd values must be keywords and even values must be units, where the keywords determine the initial edges and the units determine the offset (ex. top 10px right 40px = 10px from the top, 40px from the right edge). The default is top left, or 0 0 (Commonly used options are: center or top or bottom or top left or bottom center or center center or center -266px or center -270px)"
 #                @end
 #                @when type = "color":
 #                  @prop color type={string} title="Background color" description="Enter a color (e.g., '#999' or 'rgb(230,230,230)')"
 #                @end
 #              @end
 #            @end
 #            @prop class type={string} title="Class Name(s)" description="Add an additional class for the primary region."
 #            @prop columns type={integer} title="Columns" description="Enter the number of columns for the primary region." minimum="1" maximum="12" default="6"
 #            @contains @array_of 'intro_text' with:
 #              @prop description type={string} title="Intro Text" description="Text for the primary region." @allow localeKeyRTF
 #            @end
 #            @contains @object_of 'instructions' with:
 #              @title 'Instructions (optional)'
 #              @prop text type={string} title="Instruction Text" @allow localeKeyRTF
 #              @prop [icon_prefix] type={string} title="Icon Prefix" default="fas"
 #              "fas"
 #              "far"
 #              "fal"
 #              @prop icon_name type={string} title="Icon Name" default="fa-info-circle"
 #            @end
 #            @contains @array_of 'blocks' with:
 #              @title 'These blocks will only render if the secondary region image is present'
 #              @includes: {{blocks}}
 #            @end
 #          @end
 #        @end
 #      @end
 #      @contains @object_of 'asset' with:
 #        @title 'Asset Region'
 #        @prop enable type={boolean} title="Enable Asset Region?" default="false"
 #        @contains @one_of dependency with:
 #          @when enable = "true":
 #            @prop class type={string} title="Class Name(s)" description="Add an additional class for the asset region."
 #            @prop columns type={integer} title="Columns" description="Enter the number of columns for the asset region." minimum="1" maximum="12" default="12"
 #            @prop image type={string} title="Image" description="Image path for the asset region" @allow imagePicker
 #            @prop @advanced image_description type={string} title="Alt Text" description="Decorative images should have an empty alt tag for screen readers" @allow localeKeyPlain
 #            @contains @advanced @object_of 'lottie' with:
 #              @prop id type={string} title="Unique Lottie ID"
 #              @prop path type={string} title="Lottie File Path" description="The file that exported from After Effects; file (should have extension '.json')"
 #              @prop loop type={integer} title="How many times to Loop?" description="Set to -1 to loop infinitely; set to 0 to play once; set to 1 to play twice, etc. Default is to play once."
 #              @prop delay type={number} title="Delay" default="0" description="Delay (in seconds) before the animation plays"
 #              @prop width type={string} title="Maximum Width" description="Set the maximum width of the Lottie (e.g., '100px')"
 #              @prop fromFrame type={integer} minimum="0" title="Start Frame"
 #              @prop toFrame type={integer} minimum="0" title="End Frame"
 #              @prop autoplay type={boolean} title="Autoplay?" default="false"
 #            @end
 #          @end
 #        @end
 #      @end
 #      @contains @array_of 'regions' with:
 #        @contains @object_of 'background' with:
 #          @prop [type] type={string} title="Type of Background" description="Determines the type of background for the region."
 #            "image"
 #            "color"
 #          @contains @one_of dependency with:
 #            @when type = "image":
 #              @prop path type={string} title="Path" description="Path to Image" @allow imagePicker
 #              @prop color type={string} title="Color Overlay" description="Enter a color (e.g., '#999' or 'rgb(230,230,230)')"
 #              @prop size type={string} title="Image Size (Optional)" description="Enter a size for the image (e.g., 100% auto)."
 #            @end
 #            @when type = "color":
 #              @prop color type={string} title="Background color" description="Enter a color (e.g., '#999' or 'rgb(230,230,230)')"
 #            @end
 #          @end
 #        @end
 #        @prop class type={string} title="Class Name(s)" description="Add an additional class for the primary region."
 #        @contains @object_of 'instructions' with:
 #          @title 'Instructions (optional)'
 #          @prop text type={string} title="Instruction Text" @allow localeKeyRTF
 #          @prop [icon_prefix] type={string} title="Icon Prefix" default="fas"
 #          "fas"
 #          "far"
 #          "fal"
 #          @prop icon_name type={string} title="Icon Name" default="fa-info-circle"
 #        @end
 #        @contains @array_of 'blocks' with:
 #          @includes: {{blocks}}
 #        @end
 #        @contains @object_of 'navigation' with:
 #          @title 'Navigation (will only render if this is the last region of the template)'
 #          @prop back type={boolean} title="Disable this to hide the left navigation button" default="true"
 #          @prop next type={boolean} title="Disable this to hide the right navigation button" default="true"
 #          @prop class type={string} title="Navigation Button Class Name(s)" description="Add an additional class for the navigation buttons."
 #          @prop position type={string} title="Next Button Position" description="flex-start= left, flex-end=right"
 #        @end
 #        @prop narrow type={boolean} title="Set the primary region container's maxwidth to 672px?" default="false"
 #        @prop maxwidth type={boolean} title="Enable this to add a maxwidth property for the region."
 #      @end
 #      @prop @advanced container_class type={string} title="Container Class Name(s)" description="Add an additional class for the outer grid/container."
 #      @prop @advanced class type={string} title="Region Class Name(s)" description="Add an additional class for the outer grid/region."
 #      @prop @advanced header_class type={string} title="Header Class Name(s)" description="Add an additional class for the header text."
 #      @prop @advanced columns type={integer} title="Columns" description="Enter the number of columns for the outer grid/region." minimum="1" maximum="12" default="12"
 #      @prop @advanced maxwidth type={boolean} title="Enable this to add a maxwidth property for the outer grid/container."
 #    @end
##
--}}

{{!-- Please see course-templates/vertical-split page in Skeletor for sample usage --}}

blocks:
  - type: layout
    path: grid/grid-dynamic
    class: {{class}}
    disableGap: row
    regions:
      - columns: 12
        {{#if primary.background}}
        background:
          type: {{primary.background.type}}
          settings:
            {{#if (equal primary.background.type 'image')}}
            path: {{primary.background.path}}
            size: {{#if primary.background.size}}{{primary.background.size}}{{else}}cover{{/if}}
            {{#if primary.background.position}}
            backgroundPosition: {{primary.background.position}}{{/if}}
            {{else}}
            color: {{primary.background.color}}
            {{/if}}
        {{/if}}
        blocks:
          - type: layout
            path: grid/grid-dynamic
            maxwidth: {{#if maxwidth}}{{maxwidth}}{{else}}true{{/if}}
            class: p-stack-top-lg primary-region
            regions:
              {{#if primary.enable}}
              - columns: {{#if primary.columns}}{{primary.columns}}{{else if asset.enable}}8{{else}}12{{/if}}
                class: {{#if asset.enable}}order-2-phone order-2-tablet{{/if}} m-stack-md {{primary.class}}
                blocks:
                  {{#if header}}
                  - type: header
                    class: h1 {{#if header_class}}{{header_class}}{{/if}}
                    h1:
                      - {{t header}}
                  {{/if}}
                  {{#if subtitle}}
                  - type: text
                    items:
                      - description: {{subtitle}}
                        class: subtitle {{#if text_class}}{{text_class}}{{/if}}
                  {{/if}}
                  {{#if primary.intro_text}}
                  - type: text
                    items:
                    {{#each primary.intro_text}}
                      - description: {{t description}}
                        class: p1 {{#if text_class}}{{text_class}}{{/if}}
                    {{/each}}
                  {{/if}}
                  {{#if primary.instructions}}
                  - type: container
                    flex: true
                    align: start
                    justify: flex-start
                    wrap: nowrap
                    blocks:
                      - type: icon
                        class: p2 text-emphasis m-inline-xs
                        size: fa-lg
                        prefix: {{#if primary.instructions.icon_prefix}}{{primary.instructions.icon_prefix}}{{else}}fas{{/if}}
                        name: {{#if primary.instructions.icon_name}}{{primary.instructions.icon_name}}{{else}}fa-info-circle{{/if}}
                      - type: text
                        class: p2 text-emphasis bold
                        items:
                          - description: {{primary.instructions.text}}
                  {{/if}}
                  {{#if primary.blocks}} 
                  {{{yamlize primary.blocks 26}}}
                  {{/if}}
              {{/if}}
              {{#if asset.enable}}
              - columns: {{#if asset.columns}}{{asset.columns}}{{else}}4{{/if}}
                class: order-1-phone order-1-tablet {{#if asset.class}}{{asset.class}}{{else}}span-8-tablet{{/if}}
                blocks:
                  {{#if asset.image}}
                  - type: image
                    class: m-center text-center
                    images:
                      - path: {{asset.image}}
                        {{#if asset.image_description}}
                        description: {{asset.image_description}}
                        {{/if}}
                  {{else if asset.lottie}}
                  - type: lottie
                    animations:
                      - id: {{asset.lottie.id}}
                        path: {{asset.lottie.path}}
                        width: {{asset.lottie.width}}
                        loop: {{asset.lottie.loop}}
                        fromFrame: {{asset.lottie.fromFrame}}
                        toFrame: {{asset.lottie.toFrame}}
                        delay: {{asset.lottie.delay}}
                  {{/if}}
              {{/if}}
      {{#if regions}}
      {{#each regions}}
      - columns: 12
        class: {{class}}
        maxwidth: true
        {{#compare ../regions.length '===' 1}}
        minHeight:
          calculate:
            valueA: 100vh - 108px
            valueB:
              - '.primary-region'
            operation: subtract
        {{/compare}}
        {{#if background}}
        background:
          type: {{background.type}}
          settings:
            {{#if background.path}}
            path: {{background.path}}
            size: {{#if background.size}}{{background.size}}{{else}}cover{{/if}}
            {{#if background.position}}
            backgroundPosition: {{background.position}}{{/if}}
            overlay: {{background.color}}
            {{else}}
            color: {{background.color}}
            {{/if}}
        {{/if}}
        blocks:
          - type: layout
            path: grid/maxwidth
            regions:
              - blocks:
                  - type: container
                    class: p-stack-top-md
                    {{#if narrow}}
                    max_width: 672px
                    container_class: m-center
                    {{/if}}
                    blocks:
                      {{#if instructions}}
                      - type: container
                        flex: true
                        align: start
                        justify: flex-start
                        wrap: nowrap
                        blocks:
                          - type: icon
                            class: p2 text-emphasis m-inline-xs
                            size: fa-lg
                            prefix: {{#if instructions.icon_prefix}}{{instructions.icon_prefix}}{{else}}fas{{/if}}
                            name: {{#if instructions.icon_name}}{{instructions.icon_name}}{{else}}fa-info-circle{{/if}}
                          - type: text
                            class: p2 text-emphasis bold
                            items:
                              - description: {{instructions.text}}
                      {{/if}}
                      {{#if blocks}} 
                      - type: container
                        class: m-stack-md
                        blocks:
                        {{{yamlize blocks 24}}}
                      {{/if}}
                  {{#if @last}}
                  - type: container
                    class: m-stack-xl p-stack-top-md
                    flex: true
                    wrap: nowrap
                    justify: {{#if (equal ../navigation.back false)}}{{../navigation.position}}{{else}}space-between{{/if}}
                    blocks:
                      {{#unless (equal ../navigation.back false)}}
                      - type: component
                        path: partial/molecules/navigate
                        parameters:
                          direction: back
                          text: backButton
                          button_class: {{../navigation.class}}
                      {{/unless}}
                      {{#unless (equal ../navigation.next false)}}
                      - type: component
                        path: partial/molecules/navigate
                        parameters:
                          direction: forward
                          text: forwardButton
                          button_class: {{../navigation.class}}
                      {{/unless}}
                  {{/if}}
      {{/each}}
      {{/if}}